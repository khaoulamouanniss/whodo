{
  "_from": "@reactchartjs/react-chart.js",
  "_id": "@reactchartjs/react-chart.js@1.0.0-rc.3",
  "_inBundle": false,
  "_integrity": "sha512-GSu4ny7n8AANI0G9D/0n1XK5XsErwTpxhOtL61JFWe6UQzyRWyOQ3brwLmRpycHMqyzVVR6ZKg22h5hW9amLkQ==",
  "_location": "/@reactchartjs/react-chart.js",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "@reactchartjs%2freact-chart.js",
    "fetchSpec": "latest",
    "name": "@reactchartjs/react-chart.js",
    "raw": "@reactchartjs/react-chart.js",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "scope": "@reactchartjs",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@reactchartjs/react-chart.js/-/react-chart.js-1.0.0-rc.3.tgz",
  "_shasum": "6dc4a5a7107e6d4311351aa9d1068e5fdb4d7328",
  "_shrinkwrap": null,
  "_spec": "@reactchartjs/react-chart.js",
  "_where": "/home/khaoula/lighthouse/final_project/whodo/server",
  "author": {
    "name": "Jeremy Ayerst"
  },
  "bugs": {
    "url": "https://github.com/reactchartjs/react-chart.js/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "lodash": "^4.17.19"
  },
  "deprecated": false,
  "description": "React components for Chart.js",
  "devDependencies": {
    "@testing-library/jest-dom": "^5.5.0",
    "@testing-library/react": "^10.0.3",
    "@types/chart.js": "^2.9.19",
    "@types/jest": "^25.1.4",
    "@types/lodash": "^4.14.150",
    "@types/react": "^16.9.27",
    "@typescript-eslint/eslint-plugin": "^2.26.0",
    "@typescript-eslint/parser": "^2.26.0",
    "babel-eslint": "^10.0.3",
    "chart.js": "^2.3.0",
    "cross-env": "^7.0.2",
    "eslint": "^6.8.0",
    "eslint-config-prettier": "^6.7.0",
    "eslint-config-standard": "^14.1.0",
    "eslint-config-standard-react": "^9.2.0",
    "eslint-plugin-import": "^2.18.2",
    "eslint-plugin-node": "^11.0.0",
    "eslint-plugin-prettier": "^3.1.1",
    "eslint-plugin-promise": "^4.2.1",
    "eslint-plugin-react": "^7.17.0",
    "eslint-plugin-standard": "^4.0.1",
    "gh-pages": "^2.2.0",
    "jest-canvas-mock": "^2.2.0",
    "microbundle-crl": "^0.13.11",
    "npm-run-all": "^4.1.5",
    "prettier": "^2.0.4",
    "react": "^17.0.1",
    "react-dom": "^17.0.1",
    "react-scripts": "^3.4.3",
    "react-test-renderer": "^17.0.1"
  },
  "files": [
    "dist"
  ],
  "homepage": "https://github.com/reactchartjs/react-chart.js",
  "keywords": [
    "chart",
    "chart-js",
    "chart.js",
    "react chart.js",
    "react-chart.js",
    "react-chartjs-2"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "module": "dist/index.modern.js",
  "name": "@reactchartjs/react-chart.js",
  "optionalDependencies": {},
  "peerDependencies": {
    "chart.js": "^2.3.0",
    "react": "^16.8.0 || ^17.0.0"
  },
  "readme": "[![build status](https://img.shields.io/travis/jerairrest/react-chart.js.svg?branch=master&style=flat-square)](https://travis-ci.org/reactchartjs/react-chart.js)\n[![version](https://img.shields.io/npm/v/@reactchartjs/react-chart.js?style=flat-square)](https://www.npmjs.com/package/@reactchartjs/react-chart.js)\n[![downloads](https://img.shields.io/npm/dm/@reactchartjs/react-chart.js.svg?style=flat-square)](https://npm-stat.com/charts.html?package=@reactchartjs/react-chart.js&from=2016-01-01)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n\n# @reactchartjs/react-chart.js\n\nReact wrapper for [Chart.js](http://www.chartjs.org/docs/#getting-started)\n\n## Getting started\n\n### Install library with peer dependencies\n\n```bash\nnpm install --save @reactchartjs/react-chart.js chart.js\n\n# or\n\nyarn add @reactchartjs/react-chart.js chart.js\n```\n\n###### We recommend using `chart.js ^2.5.0`\n\n### Usage\n\n```jsx\nimport { Doughnut } from '@reactchartjs/react-chart.js';\n\n<Doughnut data={...} />\n```\n\n## Examples\n\nLive: [reactchartjs.github.io/react-chartjs-2](https://reactchartjs.github.io/react-chartjs-2/#/)\n\nSee [these examples](example) for more information\n\n## Configure\n\n### Chart props\n\n```js\n  id?: string;\n  height?: number;\n  width?: number;\n  redraw?: boolean;\n  type: Chart.ChartType\n  data: Chart.ChartData | (canvas: HTMLCanvasElement | null) => Chart.ChartData;\n  options?: Chart.ChartOptions;\n  plugins?: Chart.PluginServiceRegistrationOptions[];\n  getDatasetAtEvent?: (dataset: Array<{}>, event: React.MouseEvent<HTMLCanvasElement>) => void;\n  getElementAtEvent?: (element: [{}], event: React.MouseEvent<HTMLCanvasElement>) => void;\n  getElementsAtEvent?: (elements: Array<{}>, event: React.MouseEvent<HTMLCanvasElement>) => void;\n```\n\n#### id\n\nType `string`\nDefault: `undefined`\n\nID attribute applied to the rendered canvas\n\n#### height\n\nType: `number`\nDefault: `150`\n\nHeight attribute applied to the rendered canvas\n\n#### width\n\nType: `number`\nDefault: `300`\n\nWidth attribute applied to the rendered canvas\n\n#### redraw\n\nType: `boolean`\nDefault: `false`\n\nIf true, will tear down and redraw chart on all updates\n\n#### type\n\nType: `'line' | 'bar' | 'horizontalBar' | 'radar' | 'doughnut' | 'polarArea' | 'bubble' | 'pie' | 'scatter'`\n\nChart.js chart type (required only on ChartComponent)\n\n#### data (required)\n\nType: `Chart.ChartData | (canvas: HTMLCanvasElement | null) => Chart.ChartData`\n\nThe data object that is passed into the Chart.js chart ([more info](https://www.chartjs.org/docs/latest/getting-started/)).\n\nThis can also be a function, that receives a canvas element and returns the data object.\n\n```tsx\nconst data = canvas => {\n    const ctx = canvas.getContext('2d');\n    const g = ctx.createLinearGradient(...);\n\n    return {\n        datasets: [{\n            backgroundColor: g,\n            // ...the rest\n        }],\n    };\n}\n```\n\n#### options\n\nType: `Chart.ChartOptions`\n\nThe options object that is passed into the Chart.js chart ([more info](https://www.chartjs.org/docs/latest/general/options.html))\n\n#### plugins\n\nType: `Chart.PluginServiceRegistrationOptions[]`\n\nThe plugins array that is passed into the Chart.js chart ([more info](https://www.chartjs.org/docs/latest/developers/plugins.html))\n\n#### getDatasetAtEvent\n\nType: `(dataset: Array<{}>, event: React.MouseEvent<HTMLCanvasElement>) => void`\nDefault: `undefined`\n\nProxy for Chart.js `getDatasetAtEvent`. Calls with dataset and triggering event\n\n#### getElementAtEvent\n\nType: `(element: [{}], event: React.MouseEvent<HTMLCanvasElement>) => void`\nDefault: `undefined`\n\nProxy for Chart.js `getElementAtEvent`. Calls with single element array and triggering event\n\n#### getElementsAtEvent\n\nType: `(elements: Array<{}>, event: React.MouseEvent<HTMLCanvasElement>) => void`\nDefault: `undefined`\n\nProxy for Chart.js `getElementsAtEvent`. Calls with element array and triggering event\n\n## FAQ\n\n### Why doesn't my chart maintain it's width/height?\n\nIn order for Chart.js to obey the custom size you need to set `maintainAspectRatio` to false\n\n```tsx\n<Bar\n\tdata={data}\n\twidth={100}\n\theight={50}\n\toptions={{ maintainAspectRatio: false }}\n/>\n```\n\n### How do I access my chart's instance?\n\nThe Chart.js instance can be accessed by placing a ref to the element as:\n\n```tsx\nconst App => {\n  const ref = useRef();\n\n  return <Doughnut ref={ref} data={data} options={options} />;\n};\n```\n\n### How do I acess the canvas context?\n\nThe canvas node and hence context can be accessed within the data function.\nThis approach is useful when you want to keep your components pure.\n\n```tsx\nrender() {\n  const data = (canvas) => {\n    const ctx = canvas.getContext('2d')\n    const gradient = ctx.createLinearGradient(0,0,100,0);\n\n    return {\n      backgroundColor: gradient\n      // ...the rest\n    }\n  }\n\n  return <Line data={data} />;\n}\n```\n\n## Additional Information\n\n### Defaults\n\nChart.js defaults can be set by importing the `defaults` object:\n\n```tsx\nimport { defaults } from '@reactchartjs/react-chart.js';\n\n// Disable animating charts by default.\ndefaults.global.animation = false;\n```\n\nIf you want to bulk set properties, try using the [lodash.merge](https://lodash.com/docs/#merge) function. This function will do a deep recursive merge preserving previously set values that you don't want to update.\n\n```tsx\nimport { defaults } from '@reactchartjs/react-chart.js';\nimport merge from 'lodash.merge';\n\nmerge(defaults, {\n\tglobal: {\n\t\tanimation: false,\n\t\tline: {\n\t\t\tborderColor: '#F85F73',\n\t\t},\n\t},\n});\n```\n\n### Chart.js object\n\nYou can access the internal Chart.js object to register plugins or extend charts like this:\n\n```JavaScript\nimport { Chart } from '@reactchartjs/react-chart.js';\n\ncomponentWillMount() {\n  Chart.pluginService.register({\n    afterDraw: function (chart, easing) {\n      // Plugin code.\n    }\n  });\n}\n```\n\n### Working with Multiple Datasets\n\nYou will find that any event which causes the chart to re-render, such as hover tooltips, etc., will cause the first dataset to be copied over to other datasets, causing your lines and bars to merge together. This is because to track changes in the dataset series, the library needs a `key` to be specified - if none is found, it can't tell the difference between the datasets while updating. To get around this issue, you can take these two approaches:\n\n1. Add a `label` property on each dataset. By default, this library uses the `label` property as the key to distinguish datasets.\n2. Specify a different property to be used as a key by passing a `datasetKeyProvider` prop to your chart component, which would return a unique string value for each dataset.\n\n## Development\n\n**NOTE:** The source code for the component is in `src`. A transpiled CommonJS version (generated with Babel) is available in `dist` for use with node.js, browserify and webpack. A UMD bundle is also built to `dist`, which can be included without the need for any build system.\n\n## License\n\n[MIT Licensed](LICENSE)\nCopyright (c) 2020 Jeremy Ayerst\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/reactchartjs/react-chart.js.git"
  },
  "scripts": {
    "build": "microbundle-crl --no-compress --format modern,cjs",
    "deploy": "gh-pages -d example/build",
    "format": "prettier --write src",
    "predeploy": "cd example && npm install && npm run build",
    "prepublish": "run-s build",
    "start": "microbundle-crl watch --no-compress --format modern,cjs",
    "test": "run-s test:unit test:lint test:build",
    "test:build": "run-s build",
    "test:lint": "eslint src/**/*.{ts,tsx}",
    "test:unit": "cross-env CI=1 react-scripts test --env=jsdom",
    "test:watch": "react-scripts test --env=jsdom"
  },
  "source": "src/index.tsx",
  "version": "1.0.0-rc.3"
}
